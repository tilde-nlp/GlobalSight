#=========================================================]
# Regression test file for java properties parser
# This file is assumed to be in ISO 8859-1 character encoding
#
# Form: 
# 	  # test case comment
#       # syntax >
#       property entry
#
# NOTE: add properties at the bottom using the next index
#=========================================================

# normal property with equal separator
# syntax > [key][sp]=[sp][value]
key1 = Value of Prop1

# normal property with colon separator
# syntax > [key][sp]:[sp][value]
key2 : Value of Prop2

# normal property with single whitespace separator
# syntax > [key][sp][value]
key3 Value of Prop3

# normal property with multiple whitespace separator
# syntax > [key][sp][tab][sp][value]
key4 	 value of Prop4

# property key that uses escaped terminator characters in the key name
# syntax >  \[sp]key\[sp]\=\:5[sp]=[sp][value]
# the entire valid key here is [sp]key[sp]=:5
\ key\ \=\:5 = value of Prop5

# commented property using '!'
# syntax > [!][key][sp]=[sp][value]
!keydummy1 = COMMENTED PROP, YOU SHOULD NEVER SEE THIS IN A TRASLATABLE SEGMENT

# commented property using '#'
# syntax > [#][key][sp]=[sp][value]
#keydummy2 = COMMENTED PROP, YOU SHOULD NEVER SEE THIS IN A TRASLATABLE SEGMENT

# A tab leading the key
#  syntax > [tab][key]:[value]
	key6:value of Prop6

# Tab and space leading the key
#  syntax > [tab][sp][key]:[value]
	 key7:value of Prop7

# A tab following the key
# syntax > [key][tab]:[value]
key8		:value of Prop8

# A tab and space following the key
# syntax > [key][tab][sp]:[value]
key9	 :value of Prop9

# unescaped White space following the terminator, which is NOT part of value 
# syntax > [key]:[tab][sp][value]
key10:	 value of Prop10 - ***VALUE SHOULD HAVE NO LEADING WHITE SPACE***

# escaped White space following the terminator which would BECOME part of the value 
# syntax > [key]:[\][tab][\][sp][value]
key11:\	\ value of Prop11 - ***VALUE SHOULD LEAD WITH A TAB AND A SINGLE SPACE***

# Bunch of ASCII escape sequences in the value
# syntax > [key]:[value = \t,\n,\r,\\,\",",\',',\sp ]
key12: value of prop12, \t,\n,\r,\\,\",",\',',\ , ,\a,\b,\f end

# Unicode escape sequences
# syntax > [key]:[value =  \u0041 \u00b5 \u00a5 \u0042 ]
key13: value of prop13, \u0041 \u00b5 \u00a5 \u0042 

# line continuation test - with embedded tab
# syntax > see below
key14				   apple, banana, pear, \
				   \tcanteloupe, watermelon, \
		 	 	   kiwi, mango.

# A valid key with an empty value - \n is both terminator and end-of line
# syntax > [key][\n]
key15

# A valid escaped key with an empty value - \n is both terminator and end-of line
# syntax > \[key][\n]
\key16

# A valid key with an empty value - \n is both terminator and end-of line
# syntax > [key][\n]
k

# A valid key with an empty value - \n is both terminator and end-of line
# syntax > [key][sp][\n]
key18 

# A key followed by a tab and a value
# syntax > [key][\t]=[value]
key19\t=value of prop19

# Another line continuation test with embedded cariage returns
#  syntax > see below
key20			   apple2, banana, pear,\n \
				   canteloupe, watermelon,\n \
		 	 	   kiwi, mango.

# A key followed by a value containing the basic set of characters that need to be escaped for XML
# syntax > [key] [ \[sp] < > & ' " value 21 ]
key21 \ < > & ' " value 21

# A key followed by an escaped space and then two real tabs
# syntax > [key] [\[sp][tab][tab]]
key22 \ leadspace	real tab	real tab value 22



