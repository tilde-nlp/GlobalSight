#                               -*- Mode: Sh -*- 
# 
# Copyright (c) 2000 GlobalSight Corporation. All rights reserved.
# 
# THIS DOCUMENT CONTAINS TRADE SECRET DATA WHICH IS THE PROPERTY OF 
# GLOBALSIGHT CORPORATION. THIS DOCUMENT IS SUBMITTED TO RECIPIENT
# IN CONFIDENCE. INFORMATION CONTAINED HEREIN MAY NOT BE USED, COPIED
# OR DISCLOSED IN WHOLE OR IN PART EXCEPT AS PERMITTED BY WRITTEN
# AGREEMENT SIGNED BY AN OFFICER OF GLOBALSIGHT CORPORATION.
# 
# THIS MATERIAL IS ALSO COPYRIGHTED AS AN UNPUBLISHED WORK UNDER
# SECTIONS 104 AND 408 OF TITLE 17 OF THE UNITED STATES CODE.
# UNAUTHORIZED USE, COPYING OR OTHER REPRODUCTION IS PROHIBITED
# BY LAW.

######################################################################
# 
# This helper script compiles regular expressions for Segmenter.java
# and creates a Java source file containing them in static variables.
#
# Segmenter.java then accesses the regexps at runtime.
#

######################################################################
#
# sub routines
#
function compile_regexp
{
    java -classpath ../../../../lib/jakarta-regexp-1.2.jar \
	org.apache.regexp.recompile $1 "$2" >> $OUTPUTFILE
    if [ $? != 0 ]; then
	echo "Error in regexp $2" 2>&1;
	exit 1
    fi
}

function write_header
{
    (\
    echo "/*"; \
    echo " * $OUTPUTFILE"; \
    echo " * This file has been automatically generated by $0."; \
    echo " * ***** DO NOT EDIT ***** "; \
    echo " */"; \
    echo ""; \
    echo "package com.globalsight.ling.docproc;"; \
    echo ""; \
    echo "import org.apache.regexp.*;"; \
    echo ""; \
    echo "public class `basename $OUTPUTFILE .java`"; \
    echo "{"; \
    ) >> $OUTPUTFILE
}

function write_trailer
{
    (\
    echo "}"; \
    echo ""; \
    ) >> $OUTPUTFILE
}

function frobnify_private
{
    # change all "private" qualifiers to "public"

    sed 's/private/public/g' < $OUTPUTFILE > tmp.$$
    mv -f tmp.$$ $OUTPUTFILE
    rm -f rmp.$$
}

##
## !!!!!!!! This file is obsolete !!!!!!!!!!
##
echo "This file has been replaced by ant and regexp.properties." 1>&2
exit 1

######################################################################
#
# Create the output file
#

OUTPUTFILE="SegmenterRegexps.java"

rm -f $OUTPUTFILE;
touch $OUTPUTFILE;
write_header;

######################################################################
#
# and save all regexps in it
#
#    /**
#     * <p>A regexp matching a single uppercase character followed by a
#     * period.  This is most likely <em>not</em> a word that can end a
#     * sentence.</p>
#     */
#    static private final String SINGLECHAR =
compile_regexp SINGLECHAR_ "(^|[:space:])[:alpha:]\\.[:space:]*$";

#    /**
#     * <p>A regexp matching an exclamation or question mark at the end
#     * of a segment if it's <b>not</b> followed by whitespace.</p>
#     *
#     * <p>Example: <em>"What's up?", he asked.</em> is segmented like
#     * this: <em>"What's up?</em> and <em>", he asked.</em></p>
#     */
#    static private final String ENDINGPUNCT = 
compile_regexp ENDINGPUNCT_ "(!|\\?)$";

#    /**
#     * <p>A regexp matching an exclamation or question mark at the end
#     * of a segment that is followed by closing quotes and optional
#     * whitespace.</p>
#     *
#     * <p>Example: <em>"What's up?", he asked.</em> is segmented like
#     * this: <em>"What's up?</em> and <em>", he asked.</em></p>
#     */
#    static private final String ENDINGPUNCT2 = 
compile_regexp ENDINGPUNCT2_ "(!|\\?)['|\"][:space:]*$";
#    static private final String STARTINGPUNCT2 = 
compile_regexp STARTINGPUNCT2_ "^(,|;|[:space:]*\\(?[:lower:])";

#    /**
#     * <p>A regexp matching digits followed by a period and space.
#     * Used for ordinal followers detection (in e.g. German).</p>
#     */
#    static private final String ENDINGDIGITS =
compile_regexp ENDINGDIGITS_ "(^|[:space:])[:digit:]+\\.[:space:]*$";

######################################################################
#
# Built-in abbreviation lists
#

compile_regexp ABBR_DE_ "(^|[:space:])(Dr|Prof|dipl|inform|ing|med|h\\.c|z\\.B|d\\.h|ca|sog|bzw|ggf|zw)\\.[:space:]*$"

compile_regexp ABBR_EN_ "(^|[:space:])(Dr|Mr|Mrs|Ms|i\\.e|e\\.g|w\\.r\\.t|approx|ca|cf|vs)\\.[:space:]*$"

compile_regexp ABBR_ES_ "(^|[:space:])(dho|S|Sra|Srta|U|UU|Ud|Uds|V|Vd|Vds)\\.[:space:]*$"

compile_regexp ABBR_FR_ "(^|[:space:])(Dr\\.|Prof\\.|M\\.|ex\\.|[Bb]lvd\\.|[Aa]v\\.|r\\.|ca\\.|[Tt][e\u00e9]l\\.|p\\.d\\.|[Ss]\\.[Aa]\\.)[:space:]*$"

compile_regexp ABBR_NL_ "(^|[:space:])(Dr|Prof|dipl|vb|bvb|nl|Mr|Mvr|Mevr|Mej|t\\.a\\.v|o\\.l\\.v|i\\.p\\.v|d\\.w\\.z|o\\.a|t\\.e\\.m|[Tt]el|blz|pag|St|ong|ca|V\\.U|m\\.b\\.t|t\\.g\\.v|i\\.v\\.m|t\\.o\\.v|i\\.s\\.m|n\\.a\\.v|m\\.a\\.w|v\\.a|tss)\\.[:space:]*$"

######################################################################
#
# Close the file and rename private to public
#
write_trailer;

frobnify_private;

exit 0;
