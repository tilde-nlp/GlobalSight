//  -*- Mode: Java -*-
/*
 * Copyright (c) 2004 GlobalSight Corporation. All rights reserved.
 *
 * THIS DOCUMENT CONTAINS TRADE SECRET DATA WHICH IS THE PROPERTY OF
 * GLOBALSIGHT CORPORATION. THIS DOCUMENT IS SUBMITTED TO RECIPIENT
 * IN CONFIDENCE. INFORMATION CONTAINED HEREIN MAY NOT BE USED, COPIED
 * OR DISCLOSED IN WHOLE OR IN PART EXCEPT AS PERMITTED BY WRITTEN
 * AGREEMENT SIGNED BY AN OFFICER OF GLOBALSIGHT CORPORATION.
 *
 * THIS MATERIAL IS ALSO COPYRIGHTED AS AN UNPUBLISHED WORK UNDER
 * SECTIONS 104 AND 408 OF TITLE 17 OF THE UNITED STATES CODE.
 * UNAUTHORIZED USE, COPYING OR OTHER REPRODUCTION IS PROHIBITED
 * BY LAW.
 */

/*
Javacc grammar file for Quark XPress Tags
Author: Cornelis Van Der Laan
Version 1.0 5/19/2004 Initial version
*/

options
{
    IGNORE_CASE = false;
    STATIC = false;
    JAVA_UNICODE_ESCAPE = false;
    UNICODE_INPUT = true;
    DEBUG_PARSER = false;
    DEBUG_TOKEN_MANAGER = false;
    DEBUG_LOOKAHEAD = false;
}

/*
options
{
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
}
*/

PARSER_BEGIN(Parser)
package com.globalsight.ling.docproc.extractor.xptag;

import com.globalsight.ling.docproc.extractor.xptag.XPTagObjects;
import com.globalsight.ling.docproc.extractor.xptag.IHandler;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

/**
 * <p>A XPTAG Parser automatically generated by JavaCC.  Builds an
 * Object Model and sends events to abstract handler methods in type
 * {@link IHandler}, which are implemented by class
 * ExtractionHandler.
 *
 * @see XPTagObjects
 * @see IHandler
 * @see ExtractionHandler
 */
public class Parser
    implements XPTagObjects
{
    IHandler m_handler = null;

    public static void main(String args[])
        throws ParseException
    {
        Parser parser = new Parser (System.in);
        parser.parse();
    }

    public void setHandler(IHandler p_handler)
    {
        m_handler = p_handler;
    }

    /**
     * <p>Return the current line number in the input file.  This is a
     * little helper that allows us to offset error positions obtained
     * from embedded extractors.  Embedded extractors receive a fresh
     * input object and start counting lines and columns from 1.</p>
     */
    public int getCurrentLine()
    {
        return jj_input_stream.line;
    }

    /**
     * <p>Return the current column number in the input file.  This is a
     * little helper that allows us to offset error positions obtained
     * from embedded extractors.  Embedded extractors receive a fresh
     * input object and start counting lines and columns from 1.</p>
     */
    public int getCurrentColumn()
    {
        return jj_input_stream.column;
    }

    /**
     * Returns the original text including whitespace that occured
     * between two tokens. Leading whitespace before the first token
     * is *not* returned. The tokens cannot be the same.
     */
    private String getTokenText(Token first, Token last)
    {
        StringBuffer res = new StringBuffer();

        res.append(first.image);

        for (Token t = first.next; t != last.next; t = t.next)
        {
            if (t.specialToken != null)
            {
                Token tt = t.specialToken;

                // walk the list backwards
                while (tt.specialToken != null)
                {
                    tt = tt.specialToken;
                }

                // and forwards again
                for (; tt != null; tt = tt.next)
                {
                    res.append(tt.image);
                }
            }

            res.append(t.image);
        }

        return res.toString();
    }
}
PARSER_END(Parser)

/* LEXICAL DEFINITIONS */

<*> TOKEN :
{
  <#NUM_CHAR:   ["0"-"9"] >
| <UNICODE_BOM: ("\uFEFF"|"\uFFFE") >
}

<DEFAULT> TOKEN :
{
  <VERSION:    "<v" (<NUM_CHAR>)+ "." (<NUM_CHAR>)+ ">" >
| <CHARSET:    ("<e0>" | "<e1>" | "<e2>") >
| <AT:         "<\\@>" >
| <LT:         "<\\<>" >
| <BACKSLASH:  "<\\\\>" >
| <PARATAG:    "<*" (~[">"])+ ">" >
| <SPECIALTAG: "<" ("!")? "\\" (~[">"])* ">" >
| <TAGSTART:   "<" > : InTag
| <STYLE:      "@" > : InStyle
| <PCDATA:     (~["<", "@", "\r", "\n"])+ >
| <NEWLINE2:   ("\r" ("\n")? | "\n") >
}

<InTag> TOKEN:
{
  <TAGEND: ">" > : DEFAULT
| <TAGCHAR: ~[">"] >
}

<InStyle> TOKEN:
{
  <COLON:  ":" > : DEFAULT
| <EQUAL:  "=" > : InStyleDefinition
| <STYLENAME: (~["\"", ":", "=", "@"])+ >
}

<InStyleDefinition> TOKEN:
{
  <LBRACKET: "[" > : InStyleDefinition2
| <LESSTHAN: "<" > : InStyleDefinition3
| <NEWLINE: ("\r" ("\n")? | "\n") > : DEFAULT
}

<InStyleDefinition2> TOKEN:
{
  <RBRACKET: "]" > : InStyleDefinition
| <STYLENAME2: ~["]"] >
}

<InStyleDefinition3> TOKEN:
{
  <GREATERTHAN: ">" > : InStyleDefinition
| <STYLEDEFINITION: ~[">"] >
}


/* START OF GRAMMAR */

void parse() :
{
    Token text;
}
{
    { m_handler.handleStart(); }

    (<UNICODE_BOM>)?

    (
        parseTag()
        |
        parseStyle()
        |
        parseText()
        |
        parseNewline()
    )*

    <EOF>

    { m_handler.handleFinish(); }
}

void parseTag() :
{
    Token t, t1, t2;
    StringBuffer sb;
}
{
    (
        t=<VERSION>
            {
            m_handler.handleVersion(new Version(t.image));
            }
        |
        t=<CHARSET>
            {
            m_handler.handleEncoding(new Encoding(t.image));
            }
        |
        t=<PARATAG>
            {
            m_handler.handleParagraphTag(new ParaTag(t.image));
            }
        |
        t=<SPECIALTAG>
            {
            m_handler.handleSpecialTag(new SpecialTag(t.image));
            }
        |
        t=<TAGSTART>
            {
            sb = new StringBuffer();
            sb.append(t.image);
            }
        (
            t1=<TAGCHAR>   { sb.append(t1.image); }
        )+
        t2=<TAGEND>
            {
            sb.append(t2.image);
            m_handler.handleCharacterTag(new CharTag(sb.toString()));
            }
    )
}

// token_source.SwitchTo(DEFAULT);

void parseStyle() :
{
    Token t, t1=null, t2, t3, t4, t5, t6, t7, t8, t9;
    StringBuffer sb = new StringBuffer();
}
{
    t=<STYLE> ( t1=<STYLENAME> )?
    (
        t2=<COLON>
        {
        sb.append(t.image);
        if (t1 != null) sb.append(t1.image);
        sb.append(t2.image);

        m_handler.handleStyleSelection(new StyleSelection(sb.toString()));
        }
    |
        t2=<EQUAL>
        {
            sb.append(t.image);
            if (t1 != null) sb.append(t1.image);
            sb.append(t2.image);
        }
        (
            t3=<LBRACKET>         { sb.append(t3.image); }
            (
                t4=<STYLENAME2>   { sb.append(t4.image); }
            )+
            t5=<RBRACKET>         { sb.append(t5.image); }
        )?
        t6=<LESSTHAN>             { sb.append(t6.image); }
        (
            t7=<STYLEDEFINITION>  { sb.append(t7.image); }
        )+
        t8=<GREATERTHAN>          { sb.append(t8.image); }
        t9=<NEWLINE>              { sb.append(t9.image); }
        {
        m_handler.handleStyleDefinition(new StyleDefinition(sb.toString()));
        }
    )
}

void parseText() :
{
    Token t;
    StringBuffer sb = new StringBuffer();
}
{
    (
        t=<PCDATA>
            {
            sb.append(t.image);
            }
        |
        <AT>
            {
            sb.append('@');
            }
        |
        <LT>
            {
            sb.append('<');
            }
        |
        <BACKSLASH>
            {
            sb.append('\\');
            }
        )+
        {
        m_handler.handleText(new Text(sb.toString()));
        }
}

void parseNewline() :
{
    Token t;
}
{
    t=<NEWLINE2>
        {
        m_handler.handleNewline(new Newline(t.image));
        }
}
