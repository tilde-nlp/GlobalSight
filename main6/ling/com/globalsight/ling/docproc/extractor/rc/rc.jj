 //                              -*- Mode: Java -*-
/*
 * Copyright (c) 2000 GlobalSight Corporation. All rights reserved.
 *
 * THIS DOCUMENT CONTAINS TRADE SECRET DATA WHICH IS THE PROPERTY OF
 * GLOBALSIGHT CORPORATION. THIS DOCUMENT IS SUBMITTED TO RECIPIENT
 * IN CONFIDENCE. INFORMATION CONTAINED HEREIN MAY NOT BE USED, COPIED
 * OR DISCLOSED IN WHOLE OR IN PART EXCEPT AS PERMITTED BY WRITTEN
 * AGREEMENT SIGNED BY AN OFFICER OF GLOBALSIGHT CORPORATION.
 *
 * THIS MATERIAL IS ALSO COPYRIGHTED AS AN UNPUBLISHED WORK UNDER
 * SECTIONS 104 AND 408 OF TITLE 17 OF THE UNITED STATES CODE.
 * UNAUTHORIZED USE, COPYING OR OTHER REPRODUCTION IS PROHIBITED
 * BY LAW.
 */
options
{
  STATIC = false;
  LOOKAHEAD= 1;
  DEBUG_PARSER = false;
  UNICODE_INPUT = true;
  IGNORE_CASE = true;
}
PARSER_BEGIN(Parser)
package com.globalsight.ling.docproc.extractor.rc;
/**
 * A CSS Parser automatically generated by JavaCC.  Fires {@link
 * com.globalsight.ling.docproc.extractor.css.IParseEvents
 * IParseEvents}.
 */
public class Parser
{
  private IParseEvents m_handler = null;
  public void setHandler(IParseEvents handler)
  {
    m_handler = handler;
  }
}
PARSER_END(Parser)
< DEFAULT >
TOKEN : /* WHITE SPACE - \u001a is ^Z */
{
  < S :
    (
      " "
    | "\t"
    | "\f"
    | "\u001a"
    )+ >
| < L :
    (
      "\n"
    | "\r"
    | "\r\n"
    )+ >
| < UNICODE_BOM :
    (
      "\uFEFF"
    | "\uFFFE"
    ) >
}
TOKEN : /* COMMENTS, C-Style */
{
  < C :
    (
      "/*" (~[ "*" ])* "*"
      (
        "*"
      |
        (
          ~[ "*", "/" ] (~[ "*" ])* "*"
        )
      )*
      "/"
    )
  | "//" (~[ "\n", "\r" ])* < L > >
}
TOKEN :
{
  < STRINGTABLE : "STRINGTABLE" >
| < BEGIN : "BEGIN" >
| < END : "END" >
| < CAPTION : "CAPTION" >
| < AUTO3STATE : "AUTO3STATE" >
| < AUTOCHECKBOX : "AUTOCHECKBOX" >
| < PUSHBOX : "PUSHBOX" >
| < STATE3 : "STATE3" >
| < CHECKBOX : "CHECKBOX" >
| < CONTROL : "CONTROL" >
| < CTEXT : "CTEXT" >
| < DEFPUSHBUTTON : "DEFPUSHBUTTON" >
| < GROUPBOX : "GROUPBOX" >
| < LTEXT : "LTEXT" >
| < PUSHBUTTON : "PUSHBUTTON" >
| < RADIOBUTTON : "RADIOBUTTON" >
| < RTEXT : "RTEXT" >
| < MENUITEM : "MENUITEM" >
| < POPUP : "POPUP" >
}
TOKEN :
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "\u0024", "\u0041"-"\u005a", "\u005f", "\u0061"-"\u007a", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff" ] >
| < #DIGIT : [ "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049" ] >
| < STRING_LITERAL :
    "\""
    (
      (~[ "\"", "\\", "\n", "\r" ])
    |
      (
        "\\"
        (
          [ "n", "x", "t", "b", "r", "f", "\\", "'", "\"" ]
        | [ "0"-"7" ] ([ "0"-"7" ])?
        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
        )
      )
    | (~[ "\"", "\\", "\n", "\r" ])* "\\" (< L >)+
    )*
    "\"" >
| < NUMBER :
    (
      (< DIGIT >)+
    | (< DIGIT >)* "." (< DIGIT >)+
    ) >
| < DELIM : ~[ ] >
}
void Parse() :
{
  Token t;
}
{
  {
    m_handler.handleStart();
  }
  (< UNICODE_BOM >)?
  (
    stringTable()
  | LOOKAHEAD(2)
    caption()
  | LOOKAHEAD(2)
    auto3state()
  | LOOKAHEAD(2)
    autoCheckBox()
  | LOOKAHEAD(2)
    pushBox()
  | LOOKAHEAD(2)
    state3()
  | LOOKAHEAD(2)
    checkBox()
  | LOOKAHEAD(2)
    control()
  | LOOKAHEAD(2)
    ctext()
  | LOOKAHEAD(2)
    defPushButton()
  | LOOKAHEAD(2)
    groupBox()
  | LOOKAHEAD(2)
    lText()
  | LOOKAHEAD(2)
    pushButton()
  | LOOKAHEAD(2)
    radioButton()
  | LOOKAHEAD(2)
    rText()
  | LOOKAHEAD(2)
    menuItem()
  | LOOKAHEAD(2)
    popup()
  | W()
  | others()
  )*
  < EOF >
  {
    m_handler.handleFinish();
  }
}
void stringTable() :
{
  Token t;
}
{
  t = < STRINGTABLE >
  {
    m_handler.addSkeleton(t.image);
  }
  W()
  (
    t = < IDENTIFIER >
    {
      m_handler.addSkeleton(t.image);
    }
  )?
  (
    W()
  )*
  t = < BEGIN >
  {
    m_handler.addSkeleton(t.image);
  }
  (
    oneString()
  | W()
  )*
  t = < END >
  {
    m_handler.addSkeleton(t.image);
  }
}
void caption() :
{
  Token t;
}
{
  t = < CAPTION >
  {
    m_handler.addSkeleton(t.image);
  }
  W()
  (
    t = < STRING_LITERAL >
    {
      m_handler.addCaption(t.image);
    }
  )+
}
void autoCheckBox() :
{
  Token t;
}
{
  t = < AUTOCHECKBOX >
  {
    m_handler.addSkeleton(t.image);
  }
  W()
  (
    t = < STRING_LITERAL >
    {
      m_handler.addAuto3stateText(t.image);
    }
  )+
}
void auto3state() :
{
  Token t;
}
{
  t = < AUTO3STATE >
  {
    m_handler.addSkeleton(t.image);
  }
  W()
  (
    t = < STRING_LITERAL >
    {
      m_handler.addAuto3stateText(t.image);
    }
  )+
}
void pushBox() :
{
  Token t;
}
{
  t = < PUSHBOX >
  {
    m_handler.addSkeleton(t.image);
  }
  W() t = < STRING_LITERAL >
  {
    m_handler.addPushBox(t.image);
  }
}
void state3() :
{
  Token t;
}
{
  t = < STATE3 >
  {
    m_handler.addSkeleton(t.image);
  }
  W() t = < STRING_LITERAL >
  {
    m_handler.addState3Text(t.image);
  }
}
void checkBox() :
{
  Token t;
}
{
  t = < CHECKBOX >
  {
    m_handler.addSkeleton(t.image);
  }
  W() t = < STRING_LITERAL >
  {
    m_handler.addCheckBoxText(t.image);
  }
}
void control() :
{
  Token t;
}
{
  t = < CONTROL >
  {
    m_handler.addSkeleton(t.image);
  }
  W()
  (
    t = < STRING_LITERAL >
    {
      m_handler.addControlText(t.image);
    }
  | t = < NUMBER >
    {
      m_handler.addSkeleton(t.image);
    }
  )
}
void ctext() :
{
  Token t;
}
{
  t = < CTEXT >
  {
    m_handler.addSkeleton(t.image);
  }
  W() t = < STRING_LITERAL >
  {
    m_handler.addctext(t.image);
  }
}
void defPushButton() :
{
  Token t;
}
{
  t = < DEFPUSHBUTTON >
  {
    m_handler.addSkeleton(t.image);
  }
  W() t = < STRING_LITERAL >
  {
    m_handler.addDefPushButton(t.image);
  }
}
void groupBox() :
{
  Token t;
}
{
  t = < GROUPBOX >
  {
    m_handler.addSkeleton(t.image);
  }
  W() t = < STRING_LITERAL >
  {
    m_handler.addGroupBoxText(t.image);
  }
}
void lText() :
{
  Token t;
}
{
  t = < LTEXT >
  {
    m_handler.addSkeleton(t.image);
  }
  W() t = < STRING_LITERAL >
  {
    m_handler.addLtext(t.image);
  }
}
void rText() :
{
  Token t;
}
{
  t = < RTEXT >
  {
    m_handler.addSkeleton(t.image);
  }
  W() t = < STRING_LITERAL >
  {
    m_handler.addRtext(t.image);
  }
}
void menuItem() :
{
  Token t;
}
{
  t = < MENUITEM >
  {
    m_handler.addSkeleton(t.image);
  }
  W()
  (
    t = < STRING_LITERAL >
    {
      m_handler.addMenuItemText(t.image);
    }
  | t = < IDENTIFIER >
    {
      m_handler.addSkeleton(t.image);
    }
  )
}
void popup() :
{
  Token t;
}
{
  t = < POPUP >
  {
    m_handler.addSkeleton(t.image);
  }
  W()
  (
    t = < STRING_LITERAL >
    {
      m_handler.addPopupText(t.image);
    }
  )
}
void pushButton() :
{
  Token t;
}
{
  t = < PUSHBUTTON >
  {
    m_handler.addSkeleton(t.image);
  }
  W() t = < STRING_LITERAL >
  {
    m_handler.addPushButtonText(t.image);
  }
}
void radioButton() :
{
  Token t;
}
{
  t = < RADIOBUTTON >
  {
    m_handler.addSkeleton(t.image);
  }
  W() t = < STRING_LITERAL >
  {
    m_handler.addRadioButtonText(t.image);
  }
}
void others() :
{
  Token t;
}
{
    t = < DELIM >
    {
      m_handler.addSkeleton(t.image);
    }
  | t = < IDENTIFIER >
    {
      m_handler.addSkeleton(t.image);
    }
  | t = < STRING_LITERAL >
    {
      m_handler.addSkeleton(t.image);
    }
  | t = < BEGIN >
    {
      m_handler.addSkeleton(t.image);
    }
  | t = < END >
    {
      m_handler.addSkeleton(t.image);
    }
  | t = < NUMBER >
    {
      m_handler.addSkeleton(t.image);
    }
  | t = < CONTROL >
    {
      m_handler.addSkeleton(t.image);
    }
  | t = < C >
    {
      m_handler.addSkeleton(t.image);
    }
}
void oneString() :
{
  Token t1, t2;
}
{
  (
    t1 = < IDENTIFIER >
    {
      m_handler.addSkeleton(t1.image);
    }
  | 
    t1 = < NUMBER >
    {
      m_handler.addSkeleton(t1.image);
    }
  )
  (
    W()
  )*
  (
    t2 = < STRING_LITERAL >
    {
      m_handler.addStringTableValue(t2.image);
    }
  )+
}
void W() :
{
  Token t;
}
{
  t = < S >
  {
    m_handler.addSkeleton(t.image);
  }
| t = < L >
  {
    m_handler.addSkeleton(t.image);
  }
}