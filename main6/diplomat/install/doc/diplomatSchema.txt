
CREATE TABLE CONNECTION_PROFILE(
	CONNECTION_PROFILE_ID NUMBER(10,0) NOT NULL,
	NAME VARCHAR2(127) NOT NULL,
	DRIVER VARCHAR2(127) NOT NULL,
	CONNECTION VARCHAR2(127) NOT NULL,
	USER_NAME VARCHAR2(127),
	PASSWORD VARCHAR2(127),
	UNIQUE (CONNECTION_PROFILE_ID),
	PRIMARY KEY (CONNECTION_PROFILE_ID)
);
	
CREATE TABLE TASK_QUEUE(
	TASK_QUEUE_ID NUMBER(10,0) NOT NULL,
	RECORD_PROFILE_ID NUMBER(10,0) NOT NULL,
	LOCALIZATION_PROFILE_ID NUMBER(10,0),
	SUBSTITUTION_PARAMETERS CLOB,
	UNIQUE (TASK_QUEUE_ID),
	PRIMARY KEY (TASK_QUEUE_ID)
);


CREATE TABLE URL_LIST(
	URL_ID NUMBER(10,0) NOT NULL,
	NAME VARCHAR2(127) NOT NULL,
	URL_XML CLOB NOT NULL,
	UNIQUE (URL_ID),
	PRIMARY KEY (URL_ID)
);

CREATE TABLE XML_RULE(
	XML_RULE_ID NUMBER(10,0) NOT NULL,
	NAME VARCHAR2(127) NOT NULL,
	RULE_TEXT CLOB NOT NULL,
	UNIQUE (XML_RULE_ID),
	PRIMARY KEY (XML_RULE_ID)
);

/* The KNOWN_FORMAT_TYPE table holds information about the known format types
* understood by System3. The vocab for the FORMAT_TYPE column is defined in
* the javadoc for the DiplomatAPI class */
CREATE TABLE KNOWN_FORMAT_TYPE(
	ID NUMBER(10,0) NOT NULL, /*known format type id*/
	NAME VARCHAR2(127) NOT NULL, /*user understandable format name like HTML,XML,etc.*/
	FORMAT_TYPE VARCHAR2(127), /*DiplomatAPI format type. Must be null if non Globalsight extractor used.*/
	PRE_EXTRACT_EVENT VARCHAR2(127) NOT NULL,
	PRE_MERGE_EVENT VARCHAR2(127) NOT NULL,
	UNIQUE (NAME),
	PRIMARY KEY (NAME)
);

/* Insert the known DiplomatAPI types into the KNOWN_FORMAT_TYPE table */
INSERT INTO KNOWN_FORMAT_TYPE VALUES(1,'HTML','html','Diplomat::HtmlImportedEvent','Diplomat::HtmlTranslatedEvent');
INSERT INTO KNOWN_FORMAT_TYPE VALUES(2,'CSS','css','Diplomat::CssImportedEvent','Diplomat::CssTranslatedEvent');
INSERT INTO KNOWN_FORMAT_TYPE VALUES(3,'CSS STYLES','css-styles','Diplomat::CssStylesImportedEvent','Diplomat::CssStylesTranslatedEvent');
INSERT INTO KNOWN_FORMAT_TYPE VALUES(4,'Java Properties','javaprop','Diplomat::JavapropImportedEvent','Diplomat::JavapropTranslatedEvent');
INSERT INTO KNOWN_FORMAT_TYPE VALUES(5,'Javascript','javascript','Diplomat::JavascriptImportedEvent','Diplomat::JavascriptTranslatedEvent');
INSERT INTO KNOWN_FORMAT_TYPE VALUES(6,'Plain Text','plaintext','Diplomat::PlaintextImportedEvent','Diplomat::PlaintextTranslatedEvent');
INSERT INTO KNOWN_FORMAT_TYPE VALUES(7,'XML','xml','Diplomat::XmlImportedEvent','Diplomat::XmlTranslatedEvent');
INSERT INTO KNOWN_FORMAT_TYPE VALUES(8,'XSL','xsl','Diplomat::XslImportedEvent','Diplomat::XslTranslatedEvent');

CREATE TABLE FILE_PROFILE(
	ID NUMBER(10,0) NOT NULL,
	NAME VARCHAR2(127) NOT NULL,
	KNOWN_FORMAT_TYPE_ID NUMBER(10,0) NOT NULL,
	RULE_ID NUMBER(10,0),
	UNIQUE (ID),
	UNIQUE (NAME),
	PRIMARY KEY (ID)
);

/* insert some defalut file profiles */
INSERT INTO FILE_PROFILE VALUES(1,'HTML',1,NULL);
INSERT INTO FILE_PROFILE VALUES(2,'CSS',2,NULL);
INSERT INTO FILE_PROFILE VALUES(3,'CSS STYLES',3,NULL);
INSERT INTO FILE_PROFILE VALUES(4,'Java Properties',4,NULL);
INSERT INTO FILE_PROFILE VALUES(5,'Javascript',5,NULL);
INSERT INTO FILE_PROFILE VALUES(6,'Plain Text',6,NULL);


/* The PRSXML_STORAGE table is used by the database source
 * and target adapters to keep track of the original and translated
 * Paginated Result Set Xml strings*/
CREATE TABLE PRSXML_STORAGE(
	PRSXML_ID VARCHAR2(127) NOT NULL,
	PRSXML CLOB NOT NULL,
	UNIQUE (PRSXML_ID),
	PRIMARY KEY (PRSXML_ID)
);

CREATE TABLE RECORD_PROFILE(
	RECORD_PROFILE_ID NUMBER(10,0) NOT NULL,
	NAME VARCHAR2(127) NOT NULL,
	ACQUISITION_SQL CLOB,
	ACQUISITION_CONTEXT_SQL CLOB,
	ACQUISITION_CONNECT_ID NUMBER(10,0),
	PREVIEW_INSERT_SQL CLOB,
	PREVIEW_UPDATE_SQL CLOB,
	PREVIEW_CONNECT_ID NUMBER(10,0),
	FINAL_INSERT_SQL CLOB,
	FINAL_UPDATE_SQL CLOB,
	FINAL_CONNECT_ID NUMBER(10,0),
	PREVIEW_URL_ID NUMBER(10,0),
	MANUAL_MODE NUMBER(1,0),
	UNIQUE (RECORD_PROFILE_ID),
	PRIMARY KEY (RECORD_PROFILE_ID),
	FOREIGN KEY (ACQUISITION_CONNECT_ID) REFERENCES "CONNECTION_PROFILE"(CONNECTION_PROFILE_ID),
	FOREIGN KEY (PREVIEW_CONNECT_ID) REFERENCES "CONNECTION_PROFILE"(CONNECTION_PROFILE_ID),
	FOREIGN KEY (FINAL_CONNECT_ID) REFERENCES "CONNECTION_PROFILE"(CONNECTION_PROFILE_ID),
	FOREIGN KEY (PREVIEW_URL_ID) REFERENCES "URL_LIST"(URL_ID)
);

	
CREATE TABLE COLUMN_PROFILE(
	RECORD_PROFILE_ID NUMBER(10,0) NOT NULL,
	COLUMN_NUMBER NUMBER(10,0) NOT NULL,
	TABLE_NAME VARCHAR2(127) NOT NULL,
	DATA_TYPE VARCHAR2(127) NOT NULL,
	RULE_ID NUMBER(10,0),
	CONTENT_MODE NUMBER(2,0),
	COLUMN_LABEL VARCHAR2(127),
	FOREIGN KEY (RECORD_PROFILE_ID) REFERENCES "RECORD_PROFILE"(RECORD_PROFILE_ID) 
	ON DELETE CASCADE
);


CREATE TABLE JOB_TEMPLATE (
	JOB_TEMPLATE_ID NUMBER(5,0) NOT NULL,
	NAME VARCHAR2(127) NOT NULL,
	SOURCE_LANGUAGE NUMBER(2,0) NOT NULL,
	UNIQUE (JOB_TEMPLATE_ID),
	PRIMARY KEY (JOB_TEMPLATE_ID),
	FOREIGN KEY (SOURCE_LANGUAGE) REFERENCES "GROUPLANGS"(GLID)
);

CREATE TABLE JOB_TEMPLATE_TARGET (
	JOB_TEMPLATE_ID NUMBER(5,0) NOT NULL,
	JOB_TEMPLATE_TARGET_ID NUMBER(5,0) NOT NULL,
	TARGET_LANGUAGE NUMBER(2,0) NOT NULL,
	TM_LANGUAGE NUMBER(2,0),
	PAGE_TM NUMBER(1,0),
	FOREIGN KEY (JOB_TEMPLATE_ID) REFERENCES "JOB_TEMPLATE"(JOB_TEMPLATE_ID)
	ON DELETE CASCADE,
	UNIQUE (JOB_TEMPLATE_TARGET_ID),
	FOREIGN KEY (TARGET_LANGUAGE) REFERENCES "GROUPLANGS"(GLID)
);

CREATE TABLE JOB_TEMPLATE_ROUTING (
	JOB_TEMPLATE_TARGET_ID NUMBER(5,0) NOT NULL,
	STAGE NUMBER(2, 0) NOT NULL,
	SEQ_UENCE NUMBER(2,0) DEFAULT 0,
	USER_ID NUMBER(5,0) DEFAULT 0,
	DURATION NUMBER(5,0) DEFAULT 0,
	FOREIGN KEY (JOB_TEMPLATE_TARGET_ID) REFERENCES "JOB_TEMPLATE_TARGET"
	(JOB_TEMPLATE_TARGET_ID) ON DELETE CASCADE
);

CREATE TABLE BRANCH_LANGUAGE (
    BRANCH_ID NUMBER (5, 0) NOT NULL,
    SOURCE_BRANCH VARCHAR2(127) NOT NULL,
    TARGET_BRANCH VARCHAR2(127) NOT NULL,
    TARGET_LANGUAGE NUMBER(2,0) NOT NULL,
    FOREIGN KEY (TARGET_LANGUAGE) REFERENCES "GROUPLANGS"(GLID)
);

CREATE TABLE TASK_QUEUE_PROFILE(
	TASK_QUEUE_PROFILE_ID NUMBER(10,0) NOT NULL,
	TQP_NAME VARCHAR(127) NOT NULL,
	TQ_TABLE_NAME VARCHAR(127) NOT NULL,
	TQ_CONNECTION_ID NUMBER(10,0) NOT NULL,
	RECORDS_PER_PAGE NUMBER(5,0),
	PAGES_PER_BATCH NUMBER(5,0),
	MAX_ELAPSED_MILIS NUMBER(15,0),
	UNIQUE (TASK_QUEUE_PROFILE_ID),
	PRIMARY KEY (TASK_QUEUE_PROFILE_ID),
	FOREIGN KEY (TQ_CONNECTION_ID) REFERENCES "CONNECTION_PROFILE"(CONNECTION_PROFILE_ID)
);


CREATE TABLE CONFIG (
	ID NUMBER(10,0) NOT NULL,
	NAME   VARCHAR2 (100)  NOT NULL, 
	VALUE  VARCHAR2 (256), 
	UNIQUE (NAME),
	UNIQUE (ID), 
	PRIMARY KEY ( ID ) 
);

CREATE SEQUENCE "INCREMENT_CONFIG_ID"
	INCREMENT BY 1 NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 20 NOORDER;

CREATE SEQUENCE "INCREMENT_CONNECTION_ID"
	INCREMENT BY 1 NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
	
CREATE SEQUENCE "INCREMENT_TASK_ID"
	INCREMENT BY 1 NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
	
CREATE SEQUENCE "INCREMENT_URL_LIST"
	INCREMENT BY 1 NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
	
CREATE SEQUENCE "INCREMENT_XML_RULE"
	INCREMENT BY 1 NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
	
CREATE SEQUENCE "INCREMENT_FILE_PROFILE"
	INCREMENT BY 1 NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 20 NOORDER;

CREATE SEQUENCE "INCREMENT_RECORD_PROFILE_ID"
	INCREMENT BY 1 NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 20 NOORDER;

CREATE SEQUENCE "INCREMENT_JOBTEMPLATEID"
	INCREMENT BY 1 NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
	
CREATE SEQUENCE "INCREMENT_JOBTEMPLATETARGETID"
	INCREMENT BY 1 NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
	
CREATE SEQUENCE "INCREMENT_BRANCH_ID"
    INCREMENT BY 1 NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 20 NOORDER;

CREATE SEQUENCE "INCREMENT_TQP_ID"
    INCREMENT BY 1 NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 20 NOORDER;


