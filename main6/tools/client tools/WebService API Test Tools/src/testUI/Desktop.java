package testUI;

import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

import test.TestManager;
import test.TestManagerImpl;
import util.*;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.net.URL;
import java.util.*;

/**
 * @author likun
 */
public class Desktop extends javax.swing.JFrame
{

    /**
     * Creates new form Desktop
     */
    public Desktop() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        accountPanel = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        accountList = new javax.swing.JList();
        aMainPanel = new javax.swing.JPanel();
        aUpperPanel = new javax.swing.JPanel();
        aULeftPanel = new javax.swing.JPanel();
        aUCenterPanel = new javax.swing.JPanel();
        hostLabel = new javax.swing.JLabel();
        hostTextField = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        userNameLabel = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        httpsJCheckBox = new javax.swing.JCheckBox();
        aURightPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        loginButton = new javax.swing.JButton();
        resetAccountButton = new javax.swing.JButton();
        addAccountButton = new javax.swing.JButton();
        deleteAccountButton = new javax.swing.JButton();
        operationPanel = new javax.swing.JPanel();
        mainSplitPane = new javax.swing.JSplitPane();
        leftScrollPane2 = new javax.swing.JScrollPane();
        operationList = new javax.swing.JList();
        rightSplitPane = new javax.swing.JSplitPane();
        oMainPanel = new javax.swing.JPanel();
        oMWestPanel = new javax.swing.JPanel();
        oMEastPanel = new javax.swing.JPanel();
        oMSouthPanel = new javax.swing.JPanel();
        testButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        oMCenterPanel = new javax.swing.JPanel();
        introduction = new javax.swing.JLabel();
        oMNorthPanel = new javax.swing.JPanel();
        functionLabel = new javax.swing.JLabel();
        functionNoteLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        resultTextArea = new javax.swing.JTextArea();
        mainPanel = new javax.swing.JPanel();
        mainTabbedPane = new javax.swing.JTabbedPane();
        messagePanel = new javax.swing.JPanel();
        messageLabel = new javax.swing.JLabel();
        startLabel = new javax.swing.JLabel();
        messageCenterLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        actionMenu = new javax.swing.JMenu();
        testMenuItem = new javax.swing.JMenuItem();
        accountsMenuItem = new javax.swing.JMenuItem();
        viewFileMenu = new javax.swing.JMenu();
        operationsMenuItem = new javax.swing.JMenuItem();
        testLogMenuItem = new javax.swing.JMenuItem();
        returnedResultsMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        userGuidanceMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenu();
        accountListModel = new DefaultListModel();
        operationListModel = new DefaultListModel();
        labelTextFieldPairs = new ArrayList<Label_TextField_Panel>();
        exitMenuItem = new javax.swing.JMenuItem();
        addFileButton = new JButton("Add File");
        accountPanel.setName("accountPanel"); // NOI18N
        accountPanel.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setName("jSplitPane1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        accountList.setModel(accountListModel);
        accountList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        accountList.setCellRenderer(new AccountCellRenderer());
        accountList.setName("accountList"); // NOI18N
        accountList.addListSelectionListener(new ListSelectionListener()
        {
            public void valueChanged(ListSelectionEvent e) {
                Account account = (Account) accountList.getSelectedValue();
                if (account != null) {
                    hostTextField.setText(account.getHost());
                    portTextField.setText(account.getPort());
                    userNameTextField.setText(account.getUserName());
                    passwordField.setText(account.getPassword());
                    httpsJCheckBox.setSelected((account.getHttps().equals("true") ? true : false));
                }

            }
        });
        jScrollPane1.setViewportView(accountList);

        jSplitPane1.setLeftComponent(jScrollPane1);

        aMainPanel.setName("aMainPanel"); // NOI18N
        aMainPanel.setLayout(new java.awt.GridLayout(0, 1));

        aUpperPanel.setName("aUpperPanel"); // NOI18N
        aUpperPanel.setLayout(new java.awt.BorderLayout(60, 0));

        aULeftPanel.setName("aULeftPanel"); // NOI18N
        aUpperPanel.add(aULeftPanel, java.awt.BorderLayout.LINE_START);

        aUCenterPanel.setName("aUCenterPanel"); // NOI18N
        aUCenterPanel.setLayout(new java.awt.GridLayout(6, 3));

        final org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(testtool.TestToolApp.class).getContext().getResourceMap(Desktop.class);
        hostLabel.setText(resourceMap.getString("hostLabel.text")); // NOI18N
        hostLabel.setName("hostLabel"); // NOI18N
        aUCenterPanel.add(hostLabel);

        hostTextField.setText(resourceMap.getString("hostTextField.text")); // NOI18N
        hostTextField.setName("hostTextField"); // NOI18N
        aUCenterPanel.add(hostTextField);

        portLabel.setText(resourceMap.getString("portLabel.text")); // NOI18N
        portLabel.setName("portLabel"); // NOI18N
        aUCenterPanel.add(portLabel);

        portTextField.setText(resourceMap.getString("portTextField.text")); // NOI18N
        portTextField.setName("portTextField"); // NOI18N
        aUCenterPanel.add(portTextField);

        userNameLabel.setText(resourceMap.getString("userNameLabel.text")); // NOI18N
        userNameLabel.setName("userNameLabel"); // NOI18N
        aUCenterPanel.add(userNameLabel);

        userNameTextField.setText(resourceMap.getString("userNameTextField.text")); // NOI18N
        userNameTextField.setName("userNameTextField"); // NOI18N
        aUCenterPanel.add(userNameTextField);

        passwordLabel.setText(resourceMap.getString("passwordLabel.text")); // NOI18N
        passwordLabel.setName("passwordLabel"); // NOI18N
        aUCenterPanel.add(passwordLabel);

        passwordField.setText(resourceMap.getString("passwordField.text")); // NOI18N
        passwordField.setName("passwordField"); // NOI18N
        aUCenterPanel.add(passwordField);

        httpsJCheckBox.setText("https");
        httpsJCheckBox.setName("httpsJRadioButton");
        aUCenterPanel.add(httpsJCheckBox);

        aUpperPanel.add(aUCenterPanel, java.awt.BorderLayout.CENTER);

        aURightPanel.setName("aURightPanel"); // NOI18N
        aUpperPanel.add(aURightPanel, java.awt.BorderLayout.LINE_END);

        aMainPanel.add(aUpperPanel);

        jPanel2.setName("jPanel2"); // NOI18N

        loginButton.setText(resourceMap.getString("loginButton.text")); // NOI18N
        loginButton.setName("loginButton"); // NOI18N
        final org.jdesktop.application.ResourceMap finalResourceMap = resourceMap;
        loginButton.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e) {
                Account account = new Account(hostTextField.getText(),
                        portTextField.getText(),
                        userNameTextField.getText(),
                        new String(passwordField.getPassword()), httpsJCheckBox.isSelected());

                try {
                    if (tm == null) {
                        tm = new TestManagerImpl(account);
                        if (!accountListModel.contains(tm.getAccount())) {
                            accountListModel.addElement(account);
                        }
                        messageLabel.setText(finalResourceMap.getString("messageLabel.loginSuccessfully") + "  " + tm.getAccount().getUserName() + "@" + tm.getAccount().getHost() + ":" + tm.getAccount().getPort() + ":https(" + tm.getAccount().getHttps() + ")");
                        //Get all the APIs 
                        for (Operation o : tm.getOperationList()) {
                            operationListModel.addElement(o);
                            mainTabbedPane.insertTab("test", null, operationPanel, null, 0);
                            mainTabbedPane.setSelectedIndex(0);
                        }
                    } else {
                        if (!tm.getAccount().equals(account)) {
                            Account oldAccount = tm.getAccount();
                            WriteLog.info(WebServiceConstants.IS_LOG, "Account switch: " + oldAccount + "===>>>" + account);
                            tm = new TestManagerImpl(account);
                            if (!accountListModel.contains(account)) {
                                accountListModel.addElement(account);
                            }
                            messageLabel.setText(finalResourceMap.getString("messageLabel.loginSuccessfully") + "  " + tm.getAccount().getUserName() + "@" + tm.getAccount().getHost() + ":" + tm.getAccount().getPort());
                        }
                    }
                }
                catch (Exception te) {
                    PrintStream ps = WriteLog.getPrintStreamForLog(WebServiceConstants.LOG_FILE);
                    te.printStackTrace(ps);
                    JOptionPane.showMessageDialog(null, finalResourceMap.getString("messageLabel.loginFail"), "Type error", JOptionPane.ERROR_MESSAGE);
                }

            }
        });
        jPanel2.add(loginButton);

        resetAccountButton.setText(resourceMap.getString("resetAccountButton.text")); // NOI18N
        resetAccountButton.setName("resetAccountButton"); // NOI18N
        resetAccountButton.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e) {
                hostTextField.setText("");
                portTextField.setText("");
                userNameTextField.setText("");
                passwordField.setText("");
                httpsJCheckBox.setSelected(false);
            }
        });
        jPanel2.add(resetAccountButton);

        addAccountButton.setText(resourceMap.getString("addAccountButton.text")); // NOI18N
        addAccountButton.setName("addAccountButton"); // NOI18N
        addAccountButton.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e) {
                if (hostTextField.getText().equals("") ||
                        portTextField.getText().equals("") ||
                        userNameTextField.getText().equals("") || passwordField.getPassword().equals("")) {
                    JOptionPane.showMessageDialog(null, finalResourceMap.getString("messageLabel.addAccounts"), "Type error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                Account account = new Account(hostTextField.getText(),
                        portTextField.getText(),
                        userNameTextField.getText(),
                        new String(passwordField.getPassword()), httpsJCheckBox.isSelected());
                if (!accountListModel.contains(account)) {
                    accountListModel.addElement(account);
                } else {
                    new AddAccountWarnDialog(Desktop.this, true).setVisible(true);
                }

            }
        });
        jPanel2.add(addAccountButton);

        deleteAccountButton.setText(resourceMap.getString("deleteAccountButton.text")); // NOI18N
        deleteAccountButton.setName("deleteAccountButton"); // NOI18N
        deleteAccountButton.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e) {
                accountListModel.removeElement(accountList.getSelectedValue());
                hostTextField.setText("");
                portTextField.setText("");
                userNameTextField.setText("");
                passwordField.setText("");
                httpsJCheckBox.setSelected(false);
            }
        });
        jPanel2.add(deleteAccountButton);

        aMainPanel.add(jPanel2);

        jSplitPane1.setRightComponent(aMainPanel);

        accountPanel.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        operationPanel.setName("operationPanel"); // NOI18N
        operationPanel.setLayout(new java.awt.BorderLayout());

        mainSplitPane.setName("mainSplitPane"); // NOI18N

        leftScrollPane2.setName("leftScrollPane2"); // NOI18N

        operationList.setModel(operationListModel);
        operationList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        operationList.setCellRenderer(new OperationCellRenderer());
        operationList.setName("operationList"); // NOI18N
        operationList.addListSelectionListener(new ListSelectionListener()
        {
            public void valueChanged(ListSelectionEvent e) {
                labelTextFieldPairs.clear();
                oMCenterPanel.removeAll();
                functionNoteLabel.removeAll();
                functionNoteLabel.setText(resourceMap.getString("functionNoteLabel.text"));
                Operation o = (Operation) operationList.getSelectedValue();
                functionLabel.setText(o.toString());
                ArrayList<Parameter> params = o.getParaList();
                for (Parameter para : params) {
                    //For map, get the parameters from the properties file in the map
					if (para.getType().equals("Map")) { // For HashMap type
						Properties p = WriteLog.getResourceFile();
						String parameterList = p.getProperty(o.getName());
						StringTokenizer st = new StringTokenizer(parameterList,
								",");
						List parametersList = new ArrayList();
						while (st.hasMoreTokens()) {
							parametersList.add(st.nextToken().trim());
						}
							for (int i = 0; i < parametersList.size(); i = i + 2) {
								Label_TextField_Panel pair = new Label_TextField_Panel();
								pair.setLabel(parametersList.get(i + 1) + "("
										+ parametersList.get(i) + ")");
								pair.setTextField("");
								// For bytes, need to read for file
								if (parametersList.get(i)
										.equals("base64Binary")) {
									pair.setJButton();
								}
								if ((parametersList.get(i + 1)
										.equals("accessToken")))
									pair.getTextField().setEditable(false);
								oMCenterPanel.add(pair);
								labelTextFieldPairs.add(pair);
							}
					} else {
                        Label_TextField_Panel pair = new Label_TextField_Panel();
                        pair.setLabel(para.getName() + "(" + para.getType() + ")");
                        pair.setTextField("");
                        //For bytes, need to read for file
                        if (para.getType().equals("base64Binary")) {
                            pair.setJButton();
                        }
                        if ((para.getName().indexOf("accessToken")) != -1)
                            pair.getTextField().setEditable(false);
                        oMCenterPanel.add(pair);
                        labelTextFieldPairs.add(pair);
                    }
                }
                oMCenterPanel.updateUI();
            }
        });
        leftScrollPane2.setViewportView(operationList);

        mainSplitPane.setLeftComponent(leftScrollPane2);

        rightSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        rightSplitPane.setName("rightSplitPane"); // NOI18N

        oMainPanel.setName("oMainPanel"); // NOI18N
        oMainPanel.setLayout(new java.awt.BorderLayout(60, 0));

        oMWestPanel.setName("oMWestPanel"); // NOI18N
        oMainPanel.add(oMWestPanel, java.awt.BorderLayout.WEST);

        oMEastPanel.setName("oMEastPanel"); // NOI18N
        oMainPanel.add(oMEastPanel, java.awt.BorderLayout.EAST);

        oMSouthPanel.setName("oMSouthPanel"); // NOI18N
        oMSouthPanel.setLayout(new java.awt.GridLayout(1, 0));

        testButton.setText(resourceMap.getString("testButton.text")); // NOI18N
        testButton.setName("testButton"); // NOI18N
        testButton.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e) {
                if (labelTextFieldPairs.size() == 0) {
                    new OperationSelectionDialog(Desktop.this, true).setVisible(true);
                } else {
                    int paramSize = labelTextFieldPairs.size();
                    HashMap hh = new HashMap();
                    for (int i = 0; i < paramSize; i++) {
                        String paramName = labelTextFieldPairs.get(i).getLabel().getText();
                        if ((paramName.indexOf("accessToken")) != -1) {
                            hh.put(paramName, tm.getRealToken());
                        } else {
                            String s = labelTextFieldPairs.get(i).getTextField().getText().replace("\\", "\\\\");
                            hh.put(paramName, s);
                        }
                    }
                    try {
                        Operation o = (Operation) operationList.getSelectedValue();
                        String result = tm.testOperation(o, hh);

                        if (result != null)
                            resultTextArea.setText(result);
                        else
                            resultTextArea.setText("Method:" + o.getName() + "\n There is no return data for this method.\n");
                    }
                    catch (Exception te) {
                        System.out.println("run here in exception");

                        WriteLog.info(WebServiceConstants.IS_LOG, "method.invoke() Exception during TestMangerImpl.testOperation()," +
                                "Please check the argument(s) you input");
                        PrintStream ps = WriteLog.getPrintStreamForLog(WebServiceConstants.LOG_FILE);
                        te.printStackTrace(ps);
                        te.printStackTrace();
                        resultTextArea.setText(te.getCause().toString());
                    }

                }
            }
        }
        );
        oMSouthPanel.add(testButton);

        resetButton.setText(resourceMap.getString("resetButton.text")); // NOI18N
        resetButton.setName("resetButton"); // NOI18N
        resetButton.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e) {
                for (Label_TextField_Panel pair : labelTextFieldPairs) {
                    if ((pair.getLabel().getText().indexOf("accessToken")) == -1)
                        pair.getTextField().setText("");
                }
            }
        });
        oMSouthPanel.add(resetButton);

        oMainPanel.add(oMSouthPanel, java.awt.BorderLayout.SOUTH);

        oMCenterPanel.setName("oMCenterPanel"); // NOI18N
        oMCenterPanel.setLayout(new java.awt.GridLayout(0, 1));

        introduction.setText(resourceMap.getString("introduction.text")); // NOI18N
        introduction.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        introduction.setName("introduction"); // NOI18N
        oMCenterPanel.add(introduction);

        oMainPanel.add(oMCenterPanel, java.awt.BorderLayout.CENTER);

        oMNorthPanel.setName("oMNorthPanel"); // NOI18N
        oMNorthPanel.setLayout(new java.awt.GridLayout(0, 1));

        functionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        functionLabel.setText(resourceMap.getString("functionLabel.text")); // NOI18N
        functionLabel.setName("functionLabel"); // NOI18N
        oMNorthPanel.add(functionLabel);

        functionNoteLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        functionNoteLabel.setText(resourceMap.getString("functionNoteLabel.text")); // NOI18N
        functionNoteLabel.setName("functionNoteLabel"); // NOI18N
        oMNorthPanel.add(functionNoteLabel);

        oMainPanel.add(oMNorthPanel, java.awt.BorderLayout.PAGE_START);

        rightSplitPane.setTopComponent(oMainPanel);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        resultTextArea.setColumns(20);
        resultTextArea.setRows(5);
        resultTextArea.setName("resultTextArea"); // NOI18N
        resultTextArea.setLineWrap(true);
        resultTextArea.setWrapStyleWord(true);
        jScrollPane3.setViewportView(resultTextArea);

        rightSplitPane.setRightComponent(jScrollPane3);

        mainSplitPane.setRightComponent(rightSplitPane);

        operationPanel.add(mainSplitPane, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setName("Form"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                DesktopWinClosing(evt);
            }
        });

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setLayout(new java.awt.BorderLayout());

        mainTabbedPane.addMouseListener(new MouseListener()
        {
            public void mouseClicked(MouseEvent e) {
                int selected = mainTabbedPane.getSelectedIndex();
                if (e.getClickCount() == 2) mainTabbedPane.remove(selected);

            }

            public void mousePressed(MouseEvent e) {
            }

            public void mouseReleased(MouseEvent e) {
            }

            public void mouseEntered(MouseEvent e) {
            }

            public void mouseExited(MouseEvent e) {
            }
        });
        mainTabbedPane.setName("mainTabbedPane"); // NOI18N
        mainTabbedPane.insertTab("Accounts", null, accountPanel, null, 0);
        mainPanel.add(mainTabbedPane, java.awt.BorderLayout.CENTER);

        messagePanel.setName("messagePanel"); // NOI18N
        messagePanel.setLayout(new java.awt.BorderLayout());

        messageLabel.setText(resourceMap.getString("messageLabel.text")); // NOI18N
        ArrayList<Account> accounts = null;
        try {
            accounts = getAllAccounts();
            if (accounts == null) {
                messageLabel.setText(resourceMap.getString("messageLabel.noAccount"));
            } else {
                for (Account a : accounts) {
                    accountListModel.addElement(a);
                }
            }
        }
        catch (Exception e) {

            WriteLog.info(WebServiceConstants.IS_LOG, "GetAllAccounts failed!\n");
            PrintStream ps = WriteLog.getPrintStreamForLog(WebServiceConstants.LOG_FILE);
            e.printStackTrace(ps);
            e.printStackTrace();
        }
        messageLabel.setName("messageLabel"); // NOI18N
        messagePanel.add(messageLabel, java.awt.BorderLayout.CENTER);

        startLabel.setText(resourceMap.getString("startLabel.text")); // NOI18N
        startLabel.setName("startLabel"); // NOI18N
        messagePanel.add(startLabel, java.awt.BorderLayout.LINE_START);

        messageCenterLabel.setFont(resourceMap.getFont("messageCenterLabel.font")); // NOI18N
        //messageCenterLabel.setText(resourceMap.getString("messageCenterLabel.text")); // NOI18N
        messageCenterLabel.setName("messageCenterLabel"); // NOI18N
        messagePanel.add(messageCenterLabel, java.awt.BorderLayout.LINE_END);

        mainPanel.add(messagePanel, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        menuBar.setName("menuBar"); // NOI18N

        actionMenu.setText(resourceMap.getString("actionMenu.text")); // NOI18N
        actionMenu.setName("actionMenu"); // NOI18N

        testMenuItem.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e) {
                if (tm == null) {
                    new LoginWarnDialog(Desktop.this, true).setVisible(true);
                } else {
                    //Get the value of the parameters
                    if (operationListModel.size() == 0) {
                        for (Operation o : tm.getOperationList()) {
                            operationListModel.addElement(o);
                        }
                    }
                    mainTabbedPane.insertTab("test", null, operationPanel, null, 0);
                    mainTabbedPane.setSelectedIndex(0);
                }

            }

            ;
        });
        testMenuItem.setText(resourceMap.getString("testMenuItem.text")); // NOI18N
        testMenuItem.setName("testMenuItem"); // NOI18N
        actionMenu.add(testMenuItem);

        accountsMenuItem.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e) {
                mainTabbedPane.insertTab("account", null, accountPanel, null, 0);
                mainTabbedPane.setSelectedIndex(0);
            }

        });
        accountsMenuItem.setText(resourceMap.getString("accountsMenuItem.text")); // NOI18N
        accountsMenuItem.setName("accountsMenuItem"); // NOI18N
        accountsMenuItem.setPreferredSize(new java.awt.Dimension(100, 22));
        actionMenu.add(accountsMenuItem);

        menuBar.add(actionMenu);

        viewFileMenu.setText(resourceMap.getString("viewFileMenu.text")); // NOI18N
        viewFileMenu.setName("viewFileMenu"); // NOI18N

        operationsMenuItem.setText(resourceMap.getString("operationsMenuItem.text")); // NOI18N
        operationsMenuItem.setName("operationsMenuItem"); // NOI18N
        operationsMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operationsMenuItemActionPerformed(evt);
            }
        });
        viewFileMenu.add(operationsMenuItem);

        testLogMenuItem.setText(resourceMap.getString("testLogMenuItem.text")); // NOI18N
        testLogMenuItem.setName("testLogMenuItem"); // NOI18N
        testLogMenuItem.setPreferredSize(new java.awt.Dimension(155, 22));
        testLogMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testLogMenuItemActionPerformed(evt);
            }
        });
        viewFileMenu.add(testLogMenuItem);

        returnedResultsMenuItem.setText(resourceMap.getString("returnedResultsMenuItem.text")); // NOI18N
        returnedResultsMenuItem.setName("returnedResultsMenuItem"); // NOI18N
        returnedResultsMenuItem.setPreferredSize(new java.awt.Dimension(141, 25));
        returnedResultsMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnedResultsMenuItemActionPerformed(evt);
            }
        });
        viewFileMenu.add(returnedResultsMenuItem);

        menuBar.add(viewFileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        userGuidanceMenuItem.setText(resourceMap.getString("userGuidanceMenuItem.text")); // NOI18N
        userGuidanceMenuItem.setName("userGuidanceMenuItem"); // NOI18N
        userGuidanceMenuItem.setPreferredSize(new java.awt.Dimension(127, 25));
        userGuidanceMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // TODO Auto-generated method stub
                userGuidanceMenuItemActionPerformed(evt);
            }

        });
        helpMenu.add(userGuidanceMenuItem);

        /**
         aboutMenuItem.addActionListener(new ActionListener(){
         public void actionPerformed(ActionEvent e){
         mainTabbedPane.remove(account2);
         };
         });
         */
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        aboutMenuItem.addActionListener(new ActionListener()
        {

            @Override
            public void actionPerformed(ActionEvent e) {
                // TODO Auto-generated method stub
                new AboutInfo(Desktop.this, true).setVisible(true);
            }

        });

        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        exitMenu.setText(resourceMap.getString("exitMenu.text")); // NOI18N
        exitMenu.setName("exitMenu"); // NOI18N

        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        exitMenuItem.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e) {
                ArrayList<Account> accounts = new ArrayList<Account>();
                for (Object accountObject : accountListModel.toArray()) {
                    accounts.add((Account) accountObject);
                }
                EixtDialog exitDialog = new EixtDialog(Desktop.this, true);
                exitDialog.setAccountList(accounts);
                exitDialog.setVisible(true);
            }

        });
        exitMenuItem.setPreferredSize(new java.awt.Dimension(70, 22));
        exitMenu.add(exitMenuItem);

        menuBar.add(exitMenu);

        setJMenuBar(menuBar);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width - 800) / 2, (screenSize.height - 600) / 2, 800, 600);
    }// </editor-fold>//GEN-END:initComponents

    private void DesktopWinClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_DesktopWinClosing
        ArrayList<Account> accounts = new ArrayList<Account>();
        for (Object accountObject : accountListModel.toArray()) {
            accounts.add((Account) accountObject);
        }
        EixtDialog exitDialog = new EixtDialog(Desktop.this, true);
        exitDialog.setAccountList(accounts);
        exitDialog.setVisible(true);
    }//GEN-LAST:event_DesktopWinClosing

    private void operationsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operationsMenuItemActionPerformed
        //String path = Thread.currentThread().getContextClassLoader().getResource("").getPath();
        String path = FileUtil.getCurrentPath();
        String filePath = path + "/" + WebServiceConstants.OPERATION_FILE;
        File file = new File(filePath);

        Runtime runtime = Runtime.getRuntime();
        try {
            System.out.println(runtime.exec("rundll32 url.dll FileProtocolHandler " + file.getAbsolutePath()));
        }
        catch (IOException e) {
            WriteLog.info(WebServiceConstants.IS_LOG, "'operations.xml' cannot be opened: " + e.getMessage());
            PrintStream ps = WriteLog.getPrintStreamForLog(WebServiceConstants.LOG_FILE);
            e.printStackTrace(ps);
            e.printStackTrace();
        }
    }//GEN-LAST:event_operationsMenuItemActionPerformed

    private void testLogMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testLogMenuItemActionPerformed
        //String path = Thread.currentThread().getContextClassLoader().getResource("").getPath();
        String path = FileUtil.getCurrentPath();
        String filePath = path + "/" + WebServiceConstants.LOG_FILE;
        File file = new File(filePath);

        Runtime runtime = Runtime.getRuntime();
        try {
            System.out.println(runtime.exec("rundll32 url.dll FileProtocolHandler " + file.getAbsolutePath()));
        }
        catch (IOException e) {
            WriteLog.info(WebServiceConstants.IS_LOG, "Test log file cannot be opened: " + e.getMessage());
            PrintStream ps = WriteLog.getPrintStreamForLog(WebServiceConstants.LOG_FILE);
            e.printStackTrace(ps);
            e.printStackTrace();
        }
    }//GEN-LAST:event_testLogMenuItemActionPerformed

    private void returnedResultsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnedResultsMenuItemActionPerformed
        //String path = Thread.currentThread().getContextClassLoader().getResource("").getPath();
        String path = FileUtil.getCurrentPath();
        String filePath = path + "/" + WebServiceConstants.RETURNED_FILE;
        File file = new File(filePath);

        Runtime runtime = Runtime.getRuntime();
        try {
            System.out.println(runtime.exec("rundll32 url.dll FileProtocolHandler " + file.getAbsolutePath()));
        }
        catch (IOException e) {
            WriteLog.info(WebServiceConstants.IS_LOG, "Returned results log file cannot be opened: " + e.getMessage());
            PrintStream ps = WriteLog.getPrintStreamForLog(WebServiceConstants.LOG_FILE);
            e.printStackTrace(ps);
            e.printStackTrace();
        }
    }//GEN-LAST:event_returnedResultsMenuItemActionPerformed

    /*
    * @param args the command line arguments
     */

    private void userGuidanceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnedResultsMenuItemActionPerformed
        //String path = Thread.currentThread().getContextClassLoader().getResource("").getPath();
        String path = FileUtil.getCurrentPath();
        String filePath = path + "/" + WebServiceConstants.USERGUIDE_FILE;
        File file = new File(filePath);

        Runtime runtime = Runtime.getRuntime();
        try {
            System.out.println(runtime.exec("rundll32 url.dll FileProtocolHandler " + file.getAbsolutePath()));
        }
        catch (IOException e) {
            WriteLog.info(WebServiceConstants.IS_LOG, "Returned results log file cannot be opened: " + e.getMessage());
            PrintStream ps = WriteLog.getPrintStreamForLog(WebServiceConstants.LOG_FILE);
            e.printStackTrace(ps);
            e.printStackTrace();
        }
    }//GEN-LAST:event_returnedResultsMenuItemActionPerformed

    /*
    * @param args the command line arguments
     */

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run() {
                new Desktop().setVisible(true);
                System.out.println("GlobalSight Web Services Test Tool Started...\n Welcome!");
            }
        });
    }


    /**
     * public static void main(String args[]){
     * new Desktop().setVisible(true);
     * }
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel aMainPanel;
    private javax.swing.JPanel aUCenterPanel;
    private javax.swing.JPanel aULeftPanel;
    private javax.swing.JPanel aURightPanel;
    private javax.swing.JPanel aUpperPanel;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JList accountList;
    private javax.swing.JPanel accountPanel;
    private javax.swing.JMenuItem accountsMenuItem;
    private javax.swing.JMenu actionMenu;
    private javax.swing.JButton addAccountButton;
    private javax.swing.JButton deleteAccountButton;
    private javax.swing.JMenu exitMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JLabel functionLabel;
    private javax.swing.JLabel functionNoteLabel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel hostLabel;
    private javax.swing.JTextField hostTextField;
    private javax.swing.JLabel introduction;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JScrollPane leftScrollPane2;
    private javax.swing.JButton loginButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel messageCenterLabel;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JPanel messagePanel;
    private javax.swing.JPanel oMCenterPanel;
    private javax.swing.JPanel oMEastPanel;
    private javax.swing.JPanel oMNorthPanel;
    private javax.swing.JPanel oMSouthPanel;
    private javax.swing.JPanel oMWestPanel;
    private javax.swing.JPanel oMainPanel;
    private javax.swing.JList operationList;
    private javax.swing.JPanel operationPanel;
    private javax.swing.JMenuItem operationsMenuItem;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JCheckBox httpsJCheckBox;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JButton resetAccountButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JTextArea resultTextArea;
    private javax.swing.JMenuItem returnedResultsMenuItem;
    private javax.swing.JSplitPane rightSplitPane;
    private javax.swing.JLabel startLabel;
    private javax.swing.JButton testButton;
    private javax.swing.JMenuItem testLogMenuItem;
    private javax.swing.JMenuItem testMenuItem;
    private javax.swing.JMenuItem userGuidanceMenuItem;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField userNameTextField;
    private javax.swing.JMenu viewFileMenu;
    private javax.swing.JButton addFileButton;
    // End of variables declaration//GEN-END:variables

    //  Model for accountPanel and operationPanel
    private DefaultListModel accountListModel;
    private DefaultListModel operationListModel;
    private ArrayList<Label_TextField_Panel> labelTextFieldPairs;


    //  not UI
    TestManager tm;


    private ArrayList<Account> getAllAccounts() {
        File accountsXML = new File(FileUtil.getCurrentPath() + "/" + WebServiceConstants.ACCOUNTS_FILE);
        System.out.println("File ==== " + accountsXML.getAbsolutePath());

        if (!accountsXML.exists()) {
            //WriteLog.info(WebServiceConstants.IS_LOG, "'accounts.xml' does not exists. \r\n");
            return null;
        }

        ArrayList<Account> accountList = new ArrayList<Account>();

        Document doc = null;
        try {
            doc = new SAXReader().read(accountsXML);
        }
        catch (Exception e) {
            WriteLog.info(WebServiceConstants.IS_LOG, "read accounts XML file Exception in AbstractTestMangager.getAllAccounts()");
            PrintStream ps = WriteLog.getPrintStreamForLog(WebServiceConstants.LOG_FILE);
            e.printStackTrace(ps);
        }

        Element root = doc.getRootElement();
        List<Element> accounts = root.elements("account");
        for (Element account : accounts) {
            String host = account.element("host").getStringValue();
            String port = account.element("port").getStringValue();
            String userName = account.element("userName").getStringValue();
            String password = account.element("password").getStringValue();
            boolean https = account.element("https").getStringValue().equals("true") ? true : false;
            accountList.add(new Account(host, port, userName, password, https));
        }

        return accountList;
    }
}
