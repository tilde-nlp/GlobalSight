/**
 *  Copyright 2009 Welocalize, Inc. 
 *  
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  
 *  You may obtain a copy of the License at 
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  
 */

package com.globalsight.util;

import java.io.File;


/**
 * This utility is used to delete "old" files on HD of application server.
 * 
 * @author YorkJin
 * @version 8.5.8
 */
public class FileCleanUtil
{
    /**
     * Delete old files in
     * "$FStorage$\$companyName$\GlobalSight\CXE" folder.
     * 
     * @param companyId
     * @param safeIntervalDays
     */   
    public static void deleteOldCXEFiles(long companyId, int safeIntervalDays)
    {
        long safeDeleteTimePoint = getSafeDeleteTimePoint(safeIntervalDays);
        File dir = new File(
                AmbFileStoragePathUtils.getFileStorageDirPath(companyId),
                AmbFileStoragePathUtils.TEMPFILE_SUB_DIRECTORY);
        deleteFile(dir, safeDeleteTimePoint);
    }

    /**
     * Delete old files in
     * "$FStorage$\$companyName$\GlobalSight\CustomerDownload" folder.
     * 
     * @param companyId
     * @param safeIntervalDays
     */
    public static void deleteOldCustomerDownloadFiles(long companyId,
            int safeIntervalDays)
    {
        long safeDeleteTimePoint = getSafeDeleteTimePoint(safeIntervalDays);
        File dir = AmbFileStoragePathUtils.getCustomerDownloadDir(String
                .valueOf(companyId));
        deleteFile(dir, safeDeleteTimePoint);
    }

    /**
     * Delete old files in "$FStorage$\$companyName$\GlobalSight\TmImport" and
     * "$FStorage$\$companyName$\GlobalSight\TmExport" folders.
     * 
     * @param companyId
     * @param safeIntervalDays
     */
    public static void deleteOldTmImportExportFiles(long companyId,
            int safeIntervalDays)
    {
        long safeDeleteTimePoint = getSafeDeleteTimePoint(safeIntervalDays);

        File dir = new File(
                AmbFileStoragePathUtils.getFileStorageDirPath(companyId),
                AmbFileStoragePathUtils.TM_IMPORT_FILE_SUB_DIR);
        deleteFile(dir, safeDeleteTimePoint);

        dir = new File(
                AmbFileStoragePathUtils.getFileStorageDirPath(companyId),
                AmbFileStoragePathUtils.TM_EXPORT_FILE_SUB_DIR);
        deleteFile(dir, safeDeleteTimePoint);
    }

    /**
     * Delete old files in "$FStorage$\$companyName$\GlobalSight\tmp" folder.
     * 
     * @param companyId
     * @param safeIntervalDays
     */
    public static void deleteOldTmpFiles(long companyId, int safeIntervalDays)
    {
        long safeDeleteTimePoint = getSafeDeleteTimePoint(safeIntervalDays);
        File dir = new File(
                AmbFileStoragePathUtils.getFileStorageDirPath(companyId),
                "GlobalSight/tmp");
        deleteFile(dir, safeDeleteTimePoint);
    }
    
    /**
     * Delete old files in "$DOCS$\$companyName$\workOfflineDownload" folder.
     * Files are generated by "downloadXliffOfflineFile()" API.
     * 
     * @param companyId
     * @param safeIntervalDays
     */
    public static void deleteWorkOfflineDownloadFiles(long companyId,
            int safeIntervalDays)
    {
        long safeDeleteTimePoint = getSafeDeleteTimePoint(safeIntervalDays);
        File dir = new File(AmbFileStoragePathUtils.getCxeDocDir(companyId),
                "workOfflineDownload");
        deleteFile(dir, safeDeleteTimePoint);
    }

    /**
     * Delete files that are "older" than specified time.
     * 
     * @param f
     * @param safeDeleteTimePoint
     */
    public static void deleteFile(File f, long safeDeleteTimePoint)
    {
        if (!f.exists())
            return;

        if (f.isDirectory())
        {
            File[] fs = f.listFiles();
            for (File cf : fs)
            {
                deleteFile(cf, safeDeleteTimePoint);
            }
        }

        if (f.lastModified() < safeDeleteTimePoint)
        {
            f.delete();
        }
    }

    private static long getSafeDeleteTimePoint(int safeDeleteIntervalDays)
    {
        if (safeDeleteIntervalDays < 1)
            safeDeleteIntervalDays = 1;
        if (safeDeleteIntervalDays > 365)
            safeDeleteIntervalDays = 365;

        long now = System.currentTimeMillis();
        long interval = safeDeleteIntervalDays * 24 * 60 * 60 * 1000;
        return (now - interval);
    }
}
